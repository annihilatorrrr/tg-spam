// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/umputun/tg-spam/app/storage"
	"io"
	"sync"
)

// SamplesStoreMock is a mock implementation of bot.SamplesStore.
//
//	func TestSomethingThatUsesSamplesStore(t *testing.T) {
//
//		// make and configure a mocked bot.SamplesStore
//		mockedSamplesStore := &SamplesStoreMock{
//			ReadFunc: func(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) ([]string, error) {
//				panic("mock out the Read method")
//			},
//			ReaderFunc: func(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) (io.ReadCloser, error) {
//				panic("mock out the Reader method")
//			},
//			StatsFunc: func(ctx context.Context) (*storage.SamplesStats, error) {
//				panic("mock out the Stats method")
//			},
//		}
//
//		// use mockedSamplesStore in code that requires bot.SamplesStore
//		// and then make assertions.
//
//	}
type SamplesStoreMock struct {
	// ReadFunc mocks the Read method.
	ReadFunc func(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) ([]string, error)

	// ReaderFunc mocks the Reader method.
	ReaderFunc func(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) (io.ReadCloser, error)

	// StatsFunc mocks the Stats method.
	StatsFunc func(ctx context.Context) (*storage.SamplesStats, error)

	// calls tracks calls to the methods.
	calls struct {
		// Read holds details about calls to the Read method.
		Read []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T storage.SampleType
			// O is the o argument value.
			O storage.SampleOrigin
		}
		// Reader holds details about calls to the Reader method.
		Reader []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T storage.SampleType
			// O is the o argument value.
			O storage.SampleOrigin
		}
		// Stats holds details about calls to the Stats method.
		Stats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockRead   sync.RWMutex
	lockReader sync.RWMutex
	lockStats  sync.RWMutex
}

// Read calls ReadFunc.
func (mock *SamplesStoreMock) Read(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) ([]string, error) {
	if mock.ReadFunc == nil {
		panic("SamplesStoreMock.ReadFunc: method is nil but SamplesStore.Read was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   storage.SampleType
		O   storage.SampleOrigin
	}{
		Ctx: ctx,
		T:   t,
		O:   o,
	}
	mock.lockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	mock.lockRead.Unlock()
	return mock.ReadFunc(ctx, t, o)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//
//	len(mockedSamplesStore.ReadCalls())
func (mock *SamplesStoreMock) ReadCalls() []struct {
	Ctx context.Context
	T   storage.SampleType
	O   storage.SampleOrigin
} {
	var calls []struct {
		Ctx context.Context
		T   storage.SampleType
		O   storage.SampleOrigin
	}
	mock.lockRead.RLock()
	calls = mock.calls.Read
	mock.lockRead.RUnlock()
	return calls
}

// ResetReadCalls reset all the calls that were made to Read.
func (mock *SamplesStoreMock) ResetReadCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()
}

// Reader calls ReaderFunc.
func (mock *SamplesStoreMock) Reader(ctx context.Context, t storage.SampleType, o storage.SampleOrigin) (io.ReadCloser, error) {
	if mock.ReaderFunc == nil {
		panic("SamplesStoreMock.ReaderFunc: method is nil but SamplesStore.Reader was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   storage.SampleType
		O   storage.SampleOrigin
	}{
		Ctx: ctx,
		T:   t,
		O:   o,
	}
	mock.lockReader.Lock()
	mock.calls.Reader = append(mock.calls.Reader, callInfo)
	mock.lockReader.Unlock()
	return mock.ReaderFunc(ctx, t, o)
}

// ReaderCalls gets all the calls that were made to Reader.
// Check the length with:
//
//	len(mockedSamplesStore.ReaderCalls())
func (mock *SamplesStoreMock) ReaderCalls() []struct {
	Ctx context.Context
	T   storage.SampleType
	O   storage.SampleOrigin
} {
	var calls []struct {
		Ctx context.Context
		T   storage.SampleType
		O   storage.SampleOrigin
	}
	mock.lockReader.RLock()
	calls = mock.calls.Reader
	mock.lockReader.RUnlock()
	return calls
}

// ResetReaderCalls reset all the calls that were made to Reader.
func (mock *SamplesStoreMock) ResetReaderCalls() {
	mock.lockReader.Lock()
	mock.calls.Reader = nil
	mock.lockReader.Unlock()
}

// Stats calls StatsFunc.
func (mock *SamplesStoreMock) Stats(ctx context.Context) (*storage.SamplesStats, error) {
	if mock.StatsFunc == nil {
		panic("SamplesStoreMock.StatsFunc: method is nil but SamplesStore.Stats was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStats.Lock()
	mock.calls.Stats = append(mock.calls.Stats, callInfo)
	mock.lockStats.Unlock()
	return mock.StatsFunc(ctx)
}

// StatsCalls gets all the calls that were made to Stats.
// Check the length with:
//
//	len(mockedSamplesStore.StatsCalls())
func (mock *SamplesStoreMock) StatsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStats.RLock()
	calls = mock.calls.Stats
	mock.lockStats.RUnlock()
	return calls
}

// ResetStatsCalls reset all the calls that were made to Stats.
func (mock *SamplesStoreMock) ResetStatsCalls() {
	mock.lockStats.Lock()
	mock.calls.Stats = nil
	mock.lockStats.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *SamplesStoreMock) ResetCalls() {
	mock.lockRead.Lock()
	mock.calls.Read = nil
	mock.lockRead.Unlock()

	mock.lockReader.Lock()
	mock.calls.Reader = nil
	mock.lockReader.Unlock()

	mock.lockStats.Lock()
	mock.calls.Stats = nil
	mock.lockStats.Unlock()
}
