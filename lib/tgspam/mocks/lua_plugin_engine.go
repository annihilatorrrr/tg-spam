// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/umputun/tg-spam/lib/tgspam/lua"
	"sync"
)

// LuaPluginEngineMock is a mock implementation of tgspam.LuaPluginEngine.
//
//	func TestSomethingThatUsesLuaPluginEngine(t *testing.T) {
//
//		// make and configure a mocked tgspam.LuaPluginEngine
//		mockedLuaPluginEngine := &LuaPluginEngineMock{
//			CloseFunc: func()  {
//				panic("mock out the Close method")
//			},
//			GetAllChecksFunc: func() map[string]lua.PluginCheck {
//				panic("mock out the GetAllChecks method")
//			},
//			GetCheckFunc: func(name string) (lua.PluginCheck, error) {
//				panic("mock out the GetCheck method")
//			},
//			LoadDirectoryFunc: func(dir string) error {
//				panic("mock out the LoadDirectory method")
//			},
//			LoadScriptFunc: func(path string) error {
//				panic("mock out the LoadScript method")
//			},
//		}
//
//		// use mockedLuaPluginEngine in code that requires tgspam.LuaPluginEngine
//		// and then make assertions.
//
//	}
type LuaPluginEngineMock struct {
	// CloseFunc mocks the Close method.
	CloseFunc func()

	// GetAllChecksFunc mocks the GetAllChecks method.
	GetAllChecksFunc func() map[string]lua.PluginCheck

	// GetCheckFunc mocks the GetCheck method.
	GetCheckFunc func(name string) (lua.PluginCheck, error)

	// LoadDirectoryFunc mocks the LoadDirectory method.
	LoadDirectoryFunc func(dir string) error

	// LoadScriptFunc mocks the LoadScript method.
	LoadScriptFunc func(path string) error

	// calls tracks calls to the methods.
	calls struct {
		// Close holds details about calls to the Close method.
		Close []struct {
		}
		// GetAllChecks holds details about calls to the GetAllChecks method.
		GetAllChecks []struct {
		}
		// GetCheck holds details about calls to the GetCheck method.
		GetCheck []struct {
			// Name is the name argument value.
			Name string
		}
		// LoadDirectory holds details about calls to the LoadDirectory method.
		LoadDirectory []struct {
			// Dir is the dir argument value.
			Dir string
		}
		// LoadScript holds details about calls to the LoadScript method.
		LoadScript []struct {
			// Path is the path argument value.
			Path string
		}
	}
	lockClose         sync.RWMutex
	lockGetAllChecks  sync.RWMutex
	lockGetCheck      sync.RWMutex
	lockLoadDirectory sync.RWMutex
	lockLoadScript    sync.RWMutex
}

// Close calls CloseFunc.
func (mock *LuaPluginEngineMock) Close() {
	if mock.CloseFunc == nil {
		panic("LuaPluginEngineMock.CloseFunc: method is nil but LuaPluginEngine.Close was just called")
	}
	callInfo := struct {
	}{}
	mock.lockClose.Lock()
	mock.calls.Close = append(mock.calls.Close, callInfo)
	mock.lockClose.Unlock()
	mock.CloseFunc()
}

// CloseCalls gets all the calls that were made to Close.
// Check the length with:
//
//	len(mockedLuaPluginEngine.CloseCalls())
func (mock *LuaPluginEngineMock) CloseCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockClose.RLock()
	calls = mock.calls.Close
	mock.lockClose.RUnlock()
	return calls
}

// ResetCloseCalls reset all the calls that were made to Close.
func (mock *LuaPluginEngineMock) ResetCloseCalls() {
	mock.lockClose.Lock()
	mock.calls.Close = nil
	mock.lockClose.Unlock()
}

// GetAllChecks calls GetAllChecksFunc.
func (mock *LuaPluginEngineMock) GetAllChecks() map[string]lua.PluginCheck {
	if mock.GetAllChecksFunc == nil {
		panic("LuaPluginEngineMock.GetAllChecksFunc: method is nil but LuaPluginEngine.GetAllChecks was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetAllChecks.Lock()
	mock.calls.GetAllChecks = append(mock.calls.GetAllChecks, callInfo)
	mock.lockGetAllChecks.Unlock()
	return mock.GetAllChecksFunc()
}

// GetAllChecksCalls gets all the calls that were made to GetAllChecks.
// Check the length with:
//
//	len(mockedLuaPluginEngine.GetAllChecksCalls())
func (mock *LuaPluginEngineMock) GetAllChecksCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetAllChecks.RLock()
	calls = mock.calls.GetAllChecks
	mock.lockGetAllChecks.RUnlock()
	return calls
}

// ResetGetAllChecksCalls reset all the calls that were made to GetAllChecks.
func (mock *LuaPluginEngineMock) ResetGetAllChecksCalls() {
	mock.lockGetAllChecks.Lock()
	mock.calls.GetAllChecks = nil
	mock.lockGetAllChecks.Unlock()
}

// GetCheck calls GetCheckFunc.
func (mock *LuaPluginEngineMock) GetCheck(name string) (lua.PluginCheck, error) {
	if mock.GetCheckFunc == nil {
		panic("LuaPluginEngineMock.GetCheckFunc: method is nil but LuaPluginEngine.GetCheck was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetCheck.Lock()
	mock.calls.GetCheck = append(mock.calls.GetCheck, callInfo)
	mock.lockGetCheck.Unlock()
	return mock.GetCheckFunc(name)
}

// GetCheckCalls gets all the calls that were made to GetCheck.
// Check the length with:
//
//	len(mockedLuaPluginEngine.GetCheckCalls())
func (mock *LuaPluginEngineMock) GetCheckCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetCheck.RLock()
	calls = mock.calls.GetCheck
	mock.lockGetCheck.RUnlock()
	return calls
}

// ResetGetCheckCalls reset all the calls that were made to GetCheck.
func (mock *LuaPluginEngineMock) ResetGetCheckCalls() {
	mock.lockGetCheck.Lock()
	mock.calls.GetCheck = nil
	mock.lockGetCheck.Unlock()
}

// LoadDirectory calls LoadDirectoryFunc.
func (mock *LuaPluginEngineMock) LoadDirectory(dir string) error {
	if mock.LoadDirectoryFunc == nil {
		panic("LuaPluginEngineMock.LoadDirectoryFunc: method is nil but LuaPluginEngine.LoadDirectory was just called")
	}
	callInfo := struct {
		Dir string
	}{
		Dir: dir,
	}
	mock.lockLoadDirectory.Lock()
	mock.calls.LoadDirectory = append(mock.calls.LoadDirectory, callInfo)
	mock.lockLoadDirectory.Unlock()
	return mock.LoadDirectoryFunc(dir)
}

// LoadDirectoryCalls gets all the calls that were made to LoadDirectory.
// Check the length with:
//
//	len(mockedLuaPluginEngine.LoadDirectoryCalls())
func (mock *LuaPluginEngineMock) LoadDirectoryCalls() []struct {
	Dir string
} {
	var calls []struct {
		Dir string
	}
	mock.lockLoadDirectory.RLock()
	calls = mock.calls.LoadDirectory
	mock.lockLoadDirectory.RUnlock()
	return calls
}

// ResetLoadDirectoryCalls reset all the calls that were made to LoadDirectory.
func (mock *LuaPluginEngineMock) ResetLoadDirectoryCalls() {
	mock.lockLoadDirectory.Lock()
	mock.calls.LoadDirectory = nil
	mock.lockLoadDirectory.Unlock()
}

// LoadScript calls LoadScriptFunc.
func (mock *LuaPluginEngineMock) LoadScript(path string) error {
	if mock.LoadScriptFunc == nil {
		panic("LuaPluginEngineMock.LoadScriptFunc: method is nil but LuaPluginEngine.LoadScript was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	mock.lockLoadScript.Lock()
	mock.calls.LoadScript = append(mock.calls.LoadScript, callInfo)
	mock.lockLoadScript.Unlock()
	return mock.LoadScriptFunc(path)
}

// LoadScriptCalls gets all the calls that were made to LoadScript.
// Check the length with:
//
//	len(mockedLuaPluginEngine.LoadScriptCalls())
func (mock *LuaPluginEngineMock) LoadScriptCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	mock.lockLoadScript.RLock()
	calls = mock.calls.LoadScript
	mock.lockLoadScript.RUnlock()
	return calls
}

// ResetLoadScriptCalls reset all the calls that were made to LoadScript.
func (mock *LuaPluginEngineMock) ResetLoadScriptCalls() {
	mock.lockLoadScript.Lock()
	mock.calls.LoadScript = nil
	mock.lockLoadScript.Unlock()
}

// ResetCalls reset all the calls that were made to all mocked methods.
func (mock *LuaPluginEngineMock) ResetCalls() {
	mock.lockClose.Lock()
	mock.calls.Close = nil
	mock.lockClose.Unlock()

	mock.lockGetAllChecks.Lock()
	mock.calls.GetAllChecks = nil
	mock.lockGetAllChecks.Unlock()

	mock.lockGetCheck.Lock()
	mock.calls.GetCheck = nil
	mock.lockGetCheck.Unlock()

	mock.lockLoadDirectory.Lock()
	mock.calls.LoadDirectory = nil
	mock.lockLoadDirectory.Unlock()

	mock.lockLoadScript.Lock()
	mock.calls.LoadScript = nil
	mock.lockLoadScript.Unlock()
}
